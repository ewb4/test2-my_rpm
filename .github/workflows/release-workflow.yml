on:
    push:
      # Sequence of patterns matched against refs/tags
      tags:
        - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:
  
name: Create RPM Release

jobs:
    build:
        name: Create RPM Release
        runs-on: ubuntu-latest
        permissions:
          contents: write

        steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Set environment variables
          run: |
            echo "RELEASE_VERSION=${GITHUB_REF#refs/*/v}" >> $GITHUB_ENV
            echo "REPO_NAME=${GITHUB_REPOSITORY#${GITHUB_REPOSITORY_OWNER}/}" >> $GITHUB_ENV

        - name: Create Release
          id: create_release
          uses: actions/create-release@latest
          env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
          with:
              tag_name: ${{ github.ref }}
              release_name: Release ${{ env.RELEASE_VERSION }}
              body: |
                Changes in this Release - ${{ env.RELEASE_VERSION }}
                - Create RPM
                - Upload only Source RPM (why?)
              draft: false
              prerelease: false

        - name: debug bits in workflow state
          run: |
            uname -a
            ls -l /etc/*release*
            pwd
            ls -lR
            echo "GITHUB_SERVER_URL: ${GITHUB_SERVER_URL}"
            echo "GITHUB_REPOSITORY_OWNER: ${GITHUB_REPOSITORY_OWNER}"
            echo "GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}"
            echo yum
            env | grep -vi secret
            echo rpmdevtools
            echo /bin/rpmdev-setuptree
            echo spectool -g -R cello.spec
            
        - name: build RPM package
          id: rpm_build
          uses: naveenrajm7/rpmbuild@master
          with:
              spec_file: "cello.spec"

        - name: Upload SRPM artifact
          uses: actions/upload-artifact@v1.0.0
          with:
              # Artifact name
              name: Source RPM
              # Directory containing files to upload
              path: ${{steps.rpm_build.outputs.source_rpm_path}}

        - name: Upload RPM artifact
          uses: actions/upload-artifact@v1.0.0
          with:
              # Artifact name
              name: Binary RPM
              # Directory containing files to upload
              path: ${{steps.rpm_build.outputs.rpm_dir_path}}
            
        - name: Upload Release Asset
          id: upload-release-asset 
          uses: actions/upload-release-asset@v1
          env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
              upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
              asset_path: ${{ steps.rpm_build.outputs.source_rpm_path }}
              asset_name: ${{ steps.rpm_build.outputs.source_rpm_name }}
              asset_content_type: ${{ steps.rpm_build.outputs.rpm_content_type }}
    
       
